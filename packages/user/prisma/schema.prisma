// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model MarketData {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  exch        String
  exchType    String
  scripCode   Int
  name        String
  expiry      String
  scripType   String
  strikeRate  String
  fullName    String
  tickSize    Float
  lotSize     Int
  qtyLimit    Int
  multiplier  Int
  symbolRoot  String
  bocoAllowed String
  isin        String
  scripData   String
  series      String
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  name     String
  password String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Session   Session[]
  Margin    Margin[]
  Holding   Holding[]
  Holdings  Holdings[]
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  accessToken  String
  requestToken String
  brokerId     String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  broker Broker @relation(fields: [brokerId], references: [id])
}

model Holding {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  brokerId String @db.ObjectId

  AvgRate         Float
  BseCode         Int
  CurrentPrice    Float
  DPQty           Int
  Exch            String
  ExchType        String
  FullName        String
  NseCode         Int
  POASigned       String
  PoolQty         Int
  Quantity        Int
  ScripMultiplier Int
  Symbol          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User      @relation(fields: [userId], references: [id])
  broker     Broker    @relation(fields: [brokerId], references: [id])
  Holdings   Holdings? @relation(fields: [holdingsId], references: [id])
  holdingsId String?   @db.ObjectId
}

model Holdings {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  brokerId String @db.ObjectId

  holdings Holding[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  broker Broker @relation(fields: [brokerId], references: [id])
}

model Broker {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  appName       String
  userId        String
  appSource     String
  userPassword  String
  userKey       String
  encryptionKey String
  imageUrl      String

  Session  Session[]
  Margin   Margin[]
  Holding  Holding[]
  Holdings Holdings[]
}

model Margin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  brokerId String @db.ObjectId

  TotalMargin      Float
  AvailableMargin  Float
  UtilizedMargin   Float
  DPFreeStockValue Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  broker Broker @relation(fields: [brokerId], references: [id])
}
