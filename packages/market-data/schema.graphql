# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateMarketData {
  _avg: MarketDataAvgAggregate
  _count: MarketDataCountAggregate
  _max: MarketDataMaxAggregate
  _min: MarketDataMinAggregate
  _sum: MarketDataSumAggregate
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type MarketData {
  bocoAllowed: String!
  exch: String!
  exchType: String!
  expiry: String!
  fullName: String!
  id: String!
  isin: String!
  lotSize: Int!
  multiplier: Int!
  name: String!
  qtyLimit: Int!
  scripCode: Int!
  scripData: String!
  scripType: String!
  series: String!
  strikeRate: String!
  symbolRoot: String!
  tickSize: Float!
}

type MarketDataAvgAggregate {
  lotSize: Float
  multiplier: Float
  qtyLimit: Float
  scripCode: Float
  tickSize: Float
}

input MarketDataAvgOrderByAggregateInput {
  lotSize: SortOrder
  multiplier: SortOrder
  qtyLimit: SortOrder
  scripCode: SortOrder
  tickSize: SortOrder
}

type MarketDataCountAggregate {
  _all: Int!
  bocoAllowed: Int!
  exch: Int!
  exchType: Int!
  expiry: Int!
  fullName: Int!
  id: Int!
  isin: Int!
  lotSize: Int!
  multiplier: Int!
  name: Int!
  qtyLimit: Int!
  scripCode: Int!
  scripData: Int!
  scripType: Int!
  series: Int!
  strikeRate: Int!
  symbolRoot: Int!
  tickSize: Int!
}

input MarketDataCountOrderByAggregateInput {
  bocoAllowed: SortOrder
  exch: SortOrder
  exchType: SortOrder
  expiry: SortOrder
  fullName: SortOrder
  id: SortOrder
  isin: SortOrder
  lotSize: SortOrder
  multiplier: SortOrder
  name: SortOrder
  qtyLimit: SortOrder
  scripCode: SortOrder
  scripData: SortOrder
  scripType: SortOrder
  series: SortOrder
  strikeRate: SortOrder
  symbolRoot: SortOrder
  tickSize: SortOrder
}

input MarketDataCreateInput {
  bocoAllowed: String!
  exch: String!
  exchType: String!
  expiry: String!
  fullName: String!
  id: String
  isin: String!
  lotSize: Int!
  multiplier: Int!
  name: String!
  qtyLimit: Int!
  scripCode: Int!
  scripData: String!
  scripType: String!
  series: String!
  strikeRate: String!
  symbolRoot: String!
  tickSize: Float!
}

input MarketDataCreateManyInput {
  bocoAllowed: String!
  exch: String!
  exchType: String!
  expiry: String!
  fullName: String!
  id: String
  isin: String!
  lotSize: Int!
  multiplier: Int!
  name: String!
  qtyLimit: Int!
  scripCode: Int!
  scripData: String!
  scripType: String!
  series: String!
  strikeRate: String!
  symbolRoot: String!
  tickSize: Float!
}

type MarketDataGroupBy {
  _avg: MarketDataAvgAggregate
  _count: MarketDataCountAggregate
  _max: MarketDataMaxAggregate
  _min: MarketDataMinAggregate
  _sum: MarketDataSumAggregate
  bocoAllowed: String!
  exch: String!
  exchType: String!
  expiry: String!
  fullName: String!
  id: String!
  isin: String!
  lotSize: Int!
  multiplier: Int!
  name: String!
  qtyLimit: Int!
  scripCode: Int!
  scripData: String!
  scripType: String!
  series: String!
  strikeRate: String!
  symbolRoot: String!
  tickSize: Float!
}

type MarketDataMaxAggregate {
  bocoAllowed: String
  exch: String
  exchType: String
  expiry: String
  fullName: String
  id: String
  isin: String
  lotSize: Int
  multiplier: Int
  name: String
  qtyLimit: Int
  scripCode: Int
  scripData: String
  scripType: String
  series: String
  strikeRate: String
  symbolRoot: String
  tickSize: Float
}

input MarketDataMaxOrderByAggregateInput {
  bocoAllowed: SortOrder
  exch: SortOrder
  exchType: SortOrder
  expiry: SortOrder
  fullName: SortOrder
  id: SortOrder
  isin: SortOrder
  lotSize: SortOrder
  multiplier: SortOrder
  name: SortOrder
  qtyLimit: SortOrder
  scripCode: SortOrder
  scripData: SortOrder
  scripType: SortOrder
  series: SortOrder
  strikeRate: SortOrder
  symbolRoot: SortOrder
  tickSize: SortOrder
}

type MarketDataMinAggregate {
  bocoAllowed: String
  exch: String
  exchType: String
  expiry: String
  fullName: String
  id: String
  isin: String
  lotSize: Int
  multiplier: Int
  name: String
  qtyLimit: Int
  scripCode: Int
  scripData: String
  scripType: String
  series: String
  strikeRate: String
  symbolRoot: String
  tickSize: Float
}

input MarketDataMinOrderByAggregateInput {
  bocoAllowed: SortOrder
  exch: SortOrder
  exchType: SortOrder
  expiry: SortOrder
  fullName: SortOrder
  id: SortOrder
  isin: SortOrder
  lotSize: SortOrder
  multiplier: SortOrder
  name: SortOrder
  qtyLimit: SortOrder
  scripCode: SortOrder
  scripData: SortOrder
  scripType: SortOrder
  series: SortOrder
  strikeRate: SortOrder
  symbolRoot: SortOrder
  tickSize: SortOrder
}

input MarketDataOrderByWithAggregationInput {
  _avg: MarketDataAvgOrderByAggregateInput
  _count: MarketDataCountOrderByAggregateInput
  _max: MarketDataMaxOrderByAggregateInput
  _min: MarketDataMinOrderByAggregateInput
  _sum: MarketDataSumOrderByAggregateInput
  bocoAllowed: SortOrder
  exch: SortOrder
  exchType: SortOrder
  expiry: SortOrder
  fullName: SortOrder
  id: SortOrder
  isin: SortOrder
  lotSize: SortOrder
  multiplier: SortOrder
  name: SortOrder
  qtyLimit: SortOrder
  scripCode: SortOrder
  scripData: SortOrder
  scripType: SortOrder
  series: SortOrder
  strikeRate: SortOrder
  symbolRoot: SortOrder
  tickSize: SortOrder
}

input MarketDataOrderByWithRelationInput {
  bocoAllowed: SortOrder
  exch: SortOrder
  exchType: SortOrder
  expiry: SortOrder
  fullName: SortOrder
  id: SortOrder
  isin: SortOrder
  lotSize: SortOrder
  multiplier: SortOrder
  name: SortOrder
  qtyLimit: SortOrder
  scripCode: SortOrder
  scripData: SortOrder
  scripType: SortOrder
  series: SortOrder
  strikeRate: SortOrder
  symbolRoot: SortOrder
  tickSize: SortOrder
}

enum MarketDataScalarFieldEnum {
  bocoAllowed
  exch
  exchType
  expiry
  fullName
  id
  isin
  lotSize
  multiplier
  name
  qtyLimit
  scripCode
  scripData
  scripType
  series
  strikeRate
  symbolRoot
  tickSize
}

input MarketDataScalarWhereWithAggregatesInput {
  AND: [MarketDataScalarWhereWithAggregatesInput!]
  NOT: [MarketDataScalarWhereWithAggregatesInput!]
  OR: [MarketDataScalarWhereWithAggregatesInput!]
  bocoAllowed: StringWithAggregatesFilter
  exch: StringWithAggregatesFilter
  exchType: StringWithAggregatesFilter
  expiry: StringWithAggregatesFilter
  fullName: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  isin: StringWithAggregatesFilter
  lotSize: IntWithAggregatesFilter
  multiplier: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  qtyLimit: IntWithAggregatesFilter
  scripCode: IntWithAggregatesFilter
  scripData: StringWithAggregatesFilter
  scripType: StringWithAggregatesFilter
  series: StringWithAggregatesFilter
  strikeRate: StringWithAggregatesFilter
  symbolRoot: StringWithAggregatesFilter
  tickSize: FloatWithAggregatesFilter
}

type MarketDataSumAggregate {
  lotSize: Int
  multiplier: Int
  qtyLimit: Int
  scripCode: Int
  tickSize: Float
}

input MarketDataSumOrderByAggregateInput {
  lotSize: SortOrder
  multiplier: SortOrder
  qtyLimit: SortOrder
  scripCode: SortOrder
  tickSize: SortOrder
}

input MarketDataUpdateInput {
  bocoAllowed: StringFieldUpdateOperationsInput
  exch: StringFieldUpdateOperationsInput
  exchType: StringFieldUpdateOperationsInput
  expiry: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  isin: StringFieldUpdateOperationsInput
  lotSize: IntFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  qtyLimit: IntFieldUpdateOperationsInput
  scripCode: IntFieldUpdateOperationsInput
  scripData: StringFieldUpdateOperationsInput
  scripType: StringFieldUpdateOperationsInput
  series: StringFieldUpdateOperationsInput
  strikeRate: StringFieldUpdateOperationsInput
  symbolRoot: StringFieldUpdateOperationsInput
  tickSize: FloatFieldUpdateOperationsInput
}

input MarketDataUpdateManyMutationInput {
  bocoAllowed: StringFieldUpdateOperationsInput
  exch: StringFieldUpdateOperationsInput
  exchType: StringFieldUpdateOperationsInput
  expiry: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  isin: StringFieldUpdateOperationsInput
  lotSize: IntFieldUpdateOperationsInput
  multiplier: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  qtyLimit: IntFieldUpdateOperationsInput
  scripCode: IntFieldUpdateOperationsInput
  scripData: StringFieldUpdateOperationsInput
  scripType: StringFieldUpdateOperationsInput
  series: StringFieldUpdateOperationsInput
  strikeRate: StringFieldUpdateOperationsInput
  symbolRoot: StringFieldUpdateOperationsInput
  tickSize: FloatFieldUpdateOperationsInput
}

input MarketDataWhereInput {
  AND: [MarketDataWhereInput!]
  NOT: [MarketDataWhereInput!]
  OR: [MarketDataWhereInput!]
  bocoAllowed: StringFilter
  exch: StringFilter
  exchType: StringFilter
  expiry: StringFilter
  fullName: StringFilter
  id: StringFilter
  isin: StringFilter
  lotSize: IntFilter
  multiplier: IntFilter
  name: StringFilter
  qtyLimit: IntFilter
  scripCode: IntFilter
  scripData: StringFilter
  scripType: StringFilter
  series: StringFilter
  strikeRate: StringFilter
  symbolRoot: StringFilter
  tickSize: FloatFilter
}

input MarketDataWhereUniqueInput {
  AND: [MarketDataWhereInput!]
  NOT: [MarketDataWhereInput!]
  OR: [MarketDataWhereInput!]
  bocoAllowed: StringFilter
  exch: StringFilter
  exchType: StringFilter
  expiry: StringFilter
  fullName: StringFilter
  id: String
  isin: StringFilter
  lotSize: IntFilter
  multiplier: IntFilter
  name: StringFilter
  qtyLimit: IntFilter
  scripCode: IntFilter
  scripData: StringFilter
  scripType: StringFilter
  series: StringFilter
  strikeRate: StringFilter
  symbolRoot: StringFilter
  tickSize: FloatFilter
}

type Mutation {
  createManyMarketData(data: [MarketDataCreateManyInput!]!): AffectedRowsOutput!
  createOneMarketData(data: MarketDataCreateInput!): MarketData!
  deleteManyMarketData(where: MarketDataWhereInput): AffectedRowsOutput!
  deleteOneMarketData(where: MarketDataWhereUniqueInput!): MarketData
  updateManyMarketData(
    data: MarketDataUpdateManyMutationInput!
    where: MarketDataWhereInput
  ): AffectedRowsOutput!
  updateOneMarketData(
    data: MarketDataUpdateInput!
    where: MarketDataWhereUniqueInput!
  ): MarketData
  upsertOneMarketData(
    create: MarketDataCreateInput!
    update: MarketDataUpdateInput!
    where: MarketDataWhereUniqueInput!
  ): MarketData!
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  aggregateMarketData(
    cursor: MarketDataWhereUniqueInput
    orderBy: [MarketDataOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: MarketDataWhereInput
  ): AggregateMarketData!
  findFirstMarketData(
    cursor: MarketDataWhereUniqueInput
    distinct: [MarketDataScalarFieldEnum!]
    orderBy: [MarketDataOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: MarketDataWhereInput
  ): MarketData
  findFirstMarketDataOrThrow(
    cursor: MarketDataWhereUniqueInput
    distinct: [MarketDataScalarFieldEnum!]
    orderBy: [MarketDataOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: MarketDataWhereInput
  ): MarketData
  findManyMarketData(
    cursor: MarketDataWhereUniqueInput
    distinct: [MarketDataScalarFieldEnum!]
    orderBy: [MarketDataOrderByWithRelationInput!]
    skip: Int
    take: Int
    where: MarketDataWhereInput
  ): [MarketData!]!
  findUniqueMarketData(where: MarketDataWhereUniqueInput!): MarketData
  findUniqueMarketDataOrThrow(where: MarketDataWhereUniqueInput!): MarketData
  groupByMarketData(
    by: [MarketDataScalarFieldEnum!]!
    having: MarketDataScalarWhereWithAggregatesInput
    orderBy: [MarketDataOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: MarketDataWhereInput
  ): [MarketDataGroupBy!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}
